<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.dotson.lastsim</string>
	<key>connections</key>
	<dict>
		<key>41CAF0BA-B8EA-42C4-BB2F-39BE9886AC0E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75DA8139-FA68-4C6B-8383-639D3ACC6464</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>75DA8139-FA68-4C6B-8383-639D3ACC6464</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0D7AB2A5-DEFD-4BA4-AD03-DBD75A88088A</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>B104381E-1A26-4D7F-B781-45FD7AB09E14</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>9884769E-27DA-48F7-9765-FF3F73F7B5E2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75DA8139-FA68-4C6B-8383-639D3ACC6464</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>C. Dotson</string>
	<key>description</key>
	<string>Search Last.fm for similar artist info</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Last.fm Look-Up</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>4</integer>
				<key>keyword</key>
				<string>ls</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>One moment, checking Last.fm...</string>
				<key>script</key>
				<string>set workflowFolder to do shell script "pwd"set wlib to load script POSIX file (workflowFolder &amp; "/q_workflow.scpt")set wf to wlib's new_workflow()-- INITIALIZE THE ICONS and LINKS --set artistIcon to "artist.png"set lfmCorrectionLink to "http://ws.audioscrobbler.com/2.0/?method=artist.getcorrection&amp;artist="set lfmSearchLink to "http://ws.audioscrobbler.com/2.0/?method=artist.search&amp;format=json&amp;artist="set lfmSimLink to "http://ws.audioscrobbler.com/2.0/?method=artist.getsimilar&amp;format=json&amp;artist="set apiKey to (system attribute "apiKey")set query to "{query}"--set nowPlayingQuery to ""-- DETERMINE WHERE IN DRILL DOWN WE AREtell application "System Events"	set queryList to wlib's q_split(query, " ⇾ ")	set stepCount to count of queryListend tellif stepCount is less than 2 then		if length of query is 0 then		-- check for currently playing artist in Music app		if application "Music" is running then			tell application "Music"				if player state is playing then					set thisSong to current track					set nowPlayingQuery to (get artist of thisSong)					set query to nowPlayingQuery				end if			end tell		end if		add_result of wf without isValid given theUid:"", theArg:"", theTitle:"Current Artist: " &amp; nowPlayingQuery, theAutocomplete:"", theSubtitle:"Select below to explore in Alfred window or Cmd+Y for Quicklook.", theIcon:"", theType:""			end if		tell application "System Events"				set resultCount to 0		set searchLimit to (system attribute "searchLimit")				set queryString to wf's q_encode_url(query as string)		set lfmSearchLink to lfmSearchLink &amp; queryString &amp; "&amp;api_key=" &amp; apiKey		set json to wf's request_json(lfmSearchLink)		set results to results of json		set resultCount to |opensearch:totalResults| of results				if resultCount is less than 1 then			add_result of wf with isValid given theUid:"", theArg:"", theTitle:"No matches for: " &amp; queryString, theAutocomplete:"", theSubtitle:"Check your spelling, or maybe you need less obscure taste in music.", theIcon:"", theType:"", theQuicklook:""		else						if resultCount is greater than searchLimit then				set resultCount to searchLimit			end if						set artistMatches to artistMatches of results			set artistList to (artist of artistMatches)			repeat with i from 1 to searchLimit				set thisResult to item i of artistList				set thisName to |name| of thisResult				set thisUrl to |url| of thisResult				set thisListeners to (listeners of thisResult) as integer				set thisListeners to do shell script "echo " &amp; thisListeners &amp; " | perl -lpe'1 while s/^([-+]?\\d+)(\\d{3})/$1,$2/'"								add_result of wf without isValid given theUid:"", theArg:thisUrl, theTitle:thisName, theAutocomplete:thisName &amp; " ⇾ ", theSubtitle:thisListeners &amp; " Listeners", theIcon:artistIcon, theType:"", theQuicklook:thisUrl							end repeat		end if	end tellend ifif stepCount is 2 then		tell application "System Events"				set resultCount to 0		set similarLimit to (system attribute "similarLimit")				set queryString to item 1 of queryList		set queryStringEncode to wf's q_encode_url(queryString as string)		set lfmSimLink to lfmSimLink &amp; queryStringEncode &amp; "&amp;api_key=" &amp; apiKey &amp; "&amp;limit=" &amp; similarLimit		set json to wf's request_json(lfmSimLink)		set resultCount to count of artist of similarartists of json				if resultCount is less than 1 then			add_result of wf with isValid given theUid:"", theArg:"", theTitle:"No matches for: " &amp; queryString, theAutocomplete:"", theSubtitle:"Check your spelling, or maybe you need less obscure taste in music.", theIcon:"", theType:"", theQuicklook:""		else						if resultCount is greater than similarLimit then				set resultCount to similarLimit			end if						add_result of wf without isValid given theUid:"", theArg:"", theTitle:"Similar Artists:", theAutocomplete:"", theSubtitle:"Select to open Last.fm in browser. Cmd+Y to view in Quicklook", theIcon:"", theType:"", theQuicklook:""						set artistList to (artist of similarartists of json)			repeat with i from 1 to similarLimit				set thisResult to item i of artistList				set thisName to |name| of thisResult				set thisUrl to |url| of thisResult				add_result of wf with isValid given theUid:"", theArg:thisUrl, theTitle:thisName, theAutocomplete:"", theSubtitle:"", theIcon:artistIcon, theType:"", theQuicklook:thisUrl							end repeat					end if			end tell	end if-- return XML datawf's to_xml("")</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Get similar artists from Last.fm</string>
				<key>title</key>
				<string>Last.fm Similar Artist Look-Up</string>
				<key>type</key>
				<integer>6</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>75DA8139-FA68-4C6B-8383-639D3ACC6464</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>37</integer>
				<key>hotmod</key>
				<integer>1310720</integer>
				<key>hotstring</key>
				<string>L</string>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>41CAF0BA-B8EA-42C4-BB2F-39BE9886AC0E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>browser</key>
				<string></string>
				<key>spaces</key>
				<string>+</string>
				<key>url</key>
				<string>{query}</string>
				<key>utf8</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>0D7AB2A5-DEFD-4BA4-AD03-DBD75A88088A</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist='https://raw.githubusercontent.com/dotson/Lastfm-Lookup/master/Source/info.plist'
readonly workflow_url='https://github.com/dotson/Lastfm-Lookup/raw/master/Last.fm%20Look-Up.alfredworkflow'
readonly download_type='github_release'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  readonly local notificator="$(find . -type d -name 'Notificator.app')"
  if [[ -n "${notificator}" ]]; then
    "${notificator}/Contents/Resources/Scripts/notificator" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  readonly local terminal_notifier="$(find . -type f -name 'terminal-notifier')"
  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}" -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download page…'
    open "${workflow_url}"
    exit 0
  fi

  download_url="$([[ "${download_type}" == 'github_release' ]] &amp;&amp; curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest" | grep 'browser_download_url' | head -1 | sed -E 's/.*browser_download_url": "(.*)"/\1/' || echo "${workflow_url}")"

  if url_exists "${download_url}"; then
    notification 'Downloading and installing…'
    curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${download_url}"
    open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>B104381E-1A26-4D7F-B781-45FD7AB09E14</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>triggerid</key>
				<string>ls_ext</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>9884769E-27DA-48F7-9765-FF3F73F7B5E2</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Lastfm-Lookup
=============

*Alfred workflow to retrieve similar artist info*

Search Last.fm database for an artist and retrieve a list of suggested artists. Selecting the similar artist from Alfred's list takes you to the Last.fm page for more info.

- "LS" or Hotkey triggers the workflow.
- Initially populates with a search for the currently playing track in iTunes, if one is playing.
- As you type an artist name, the workflow searches Last.fm for your query and provides a list of possible matches.
- Selecting an artist form the list provides a new list of Last.fm's Similar Artists for the previously chosen one.
- Selecting an artist from the new list takes you to their Last.fm page.</string>
	<key>uidata</key>
	<dict>
		<key>0D7AB2A5-DEFD-4BA4-AD03-DBD75A88088A</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>415</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>41CAF0BA-B8EA-42C4-BB2F-39BE9886AC0E</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>30</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>75DA8139-FA68-4C6B-8383-639D3ACC6464</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>215</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>9884769E-27DA-48F7-9765-FF3F73F7B5E2</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>Allows this workflow to be triggered by other workflows.</string>
			<key>xpos</key>
			<integer>30</integer>
			<key>ypos</key>
			<integer>140</integer>
		</dict>
		<key>B104381E-1A26-4D7F-B781-45FD7AB09E14</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>415</integer>
			<key>ypos</key>
			<integer>140</integer>
		</dict>
	</dict>
	<key>variables</key>
	<dict>
		<key>apiKey</key>
		<string>7b0b713a611b9e099b470baadab061c1</string>
		<key>searchLimit</key>
		<string>30</string>
		<key>similarLimit</key>
		<string>30</string>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>1.30</string>
	<key>webaddress</key>
	<string>https://github.com/dotson/Lastfm-Lookup</string>
</dict>
</plist>
